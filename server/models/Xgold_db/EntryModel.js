/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5e3b5509cb6fd67ac004a86b
*
* You will get 10% discount for each one of your friends
* 
*/
import Properties from "../../properties";
import Database from "../../classes/Database_Xgold_db";
import Errors from "../../classes/Errors";

// Factom
import Factom from "factom-harmony-connect"
import sha256 from 'sha256';
import canonicalize from 'canonical-json';

const factomConnectSDK = new Factom(Properties.factom.config);

export default {

  /**
  * EntryModel.create
  * @param chainId
  * @param signerPrivateKey
  * @param signerChainId
  * @param content
  * @param chain
  * @description CRUD ACTION create
  */
  create: async (chainId, signerPrivateKey, signerChainId, modelContent, chain) => {
    try {
      // Convert the model content into a hash
      const content = sha256(canonicalize(modelContent));
      const entry = await factomConnectSDK.chains.entries.create({
        chainId,
        signerPrivateKey,
        signerChainId,
        content,
      });
      let result = await Database.getConnection().models.Entry.create({
        entry_hash: entry.entry_hash, chain, content
      });
      return result;
    } catch(e) {
      if (e.response.status === 403) {
        throw new Errors.INVALID_AUTH_FACTOM();
      } else if (e.response.status === 429) {
        throw new Errors.EXCEDEED_LIMIT_REQUEST()
      }
    }
  },

  /**
  * EntryModel.list
  * @description CRUD ACTION list
  *
  */
  async list() {
    try {
      let list = await Database.getConnection().models.Entry.findAll();
      return list;
    } catch (e) {
      console.log(e);
    }
  },

};